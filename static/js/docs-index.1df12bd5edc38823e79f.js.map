{"version":3,"sources":["D:/Users/jacki/Documents/GitHub/alert/src/AlertMessage.tsx","D:/Users/jacki/Documents/GitHub/alert/src/AlertDescription.tsx","D:/Users/jacki/Documents/GitHub/alert/src/AlertLayout.tsx","D:/Users/jacki/Documents/GitHub/alert/src/DenseIcon.tsx","D:/Users/jacki/Documents/GitHub/alert/src/CloseButton.tsx","D:/Users/jacki/Documents/GitHub/alert/src/Alert.tsx","D:/Users/jacki/Documents/GitHub/alert/docs/index.mdx"],"names":["AlertMessage","styled","span","props","description","theme","typography","subheading","fontSize","body1","color","AlertDescription","caption","AlertLayout","div","showIcon","closable","alertLayoutPaddingCss","palette","type","colorCss","css","DenseIcon","Icon","CloseButton","IconButton","text","secondary","Globalstyle","createGlobalStyle","iconMapFilled","success","AiFillCheckCircle","info","AiFillInfoCircle","error","AiFillCloseCircle","warning","AiFillExclamationCircle","iconMapOutlined","AiOutlineCheckCircle","AiOutlineInfoCircle","AiOutlineCloseCircle","AiOutlineExclamationCircle","Alert","useState","isVisible","setIsVisible","message","children","className","afterClose","closeIcon","dense","onClick","data-testid","aria-label","IconType","CSSTransition","in","timeout","classNames","onExited","unmountOnExit","role","layoutProps","MDXContent","components","mdxType","parentName","alt","src","__position","__code","__scope","this","Playground","ThemeProvider","defaultTheme","createTheme","createPalette","pink","green","alert","style","background","padding","isMDXComponent"],"mappings":"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","file":"static/js/docs-index.c6506184.js","sourcesContent":["import styled from 'styled-components';\n\n/**\n * 警告提示内容组件\n */\n\nconst AlertMessage = styled.span<{ description?: boolean }>`\n  display: block;\n  font-size: ${(props) =>\n    props.description\n      ? props.theme.typography.subheading.fontSize\n      : props.theme.typography.body1.fontSize}rem;\n  margin-bottom: ${(props) => props.description && '4px'};\n  color: ${(props) => props.theme.typography.body1.color};\n`;\n\nexport default AlertMessage;\n","import styled from 'styled-components';\n\n/**\n * 警告提示的辅助性文字介绍组件\n */\n\nconst AlertDescription = styled.span`\n  font-size: ${(props) => props.theme.typography.body1.fontSize}rem;\n  display: block;\n  line-height: 1.5rem;\n  color: ${(props) => props.theme.typography.caption.color};\n`;\n\nexport default AlertDescription;\n","import styled from 'styled-components';\n\n/**\n * 外层容器组件\n */\n\nconst alertLayoutPaddingCss = (props: {\n  description?: boolean;\n  showIcon?: boolean;\n  type?: 'info' | 'success' | 'warning' | 'error';\n  closable?: boolean;\n}) => {\n  if (props.showIcon && props.description && props.closable) {\n    return '15px 34px 15px 64px';\n  }\n  if (props.showIcon && !props.description && props.closable) {\n    return '8px 34px 8px 37px';\n  }\n  if (props.showIcon && props.description && !props.closable) {\n    return '15px 15px 15px 64px';\n  }\n  if (props.showIcon && !props.description && !props.closable) {\n    return '8px 15px 8px 37px';\n  }\n  return '8px 34px 8px 15px';\n};\n\nconst AlertLayout = styled.div<{\n  description?: boolean;\n  showIcon?: boolean;\n  type: 'info' | 'success' | 'warning' | 'error';\n  closable?: boolean;\n}>`\n  position: relative;\n  padding: ${(props) => alertLayoutPaddingCss(props)};\n  color: rgba(0, 0, 0, 0.65);\n  line-height: 1.5;\n  border-radius: 4px;\n  background-color: ${(props) =>\n    props.theme.palette.type === 'light'\n      ? props.theme.palette[props.type === 'info' ? 'primary' : props.type][50]\n      : props.theme.palette[\n          props.type === 'info' ? 'primary' : props.type\n        ][800]};\n  border: 1px solid\n    ${(props) =>\n      props.theme.palette.type === 'light'\n        ? props.theme.palette[\n            props.type === 'info' ? 'primary' : props.type\n          ][100]\n        : props.theme.palette[\n            props.type === 'info' ? 'primary' : props.type\n          ][700]};\n\n  box-sizing: border-box;\n  word-wrap: break-word;\n  margin-bottom: 16px;\n`;\n\nexport default AlertLayout;\n","import styled, { css } from 'styled-components';\nimport Icon from 'sinoui-components/Icon';\n\nconst colorCss = css<{\n  type: 'primary' | 'info' | 'success' | 'warning' | 'error';\n}>`\n  color: ${(props) =>\n    props.theme.palette[props.type][\n      props.theme.palette.type === 'dark' ? 100 : 500\n    ]};\n`;\n\n/**\n * 辅助图标组件\n */\nconst DenseIcon = styled(Icon)<{\n  description?: boolean;\n  type: 'primary' | 'info' | 'success' | 'warning' | 'error';\n}>`\n  display: block;\n  font-size: ${(props) => (props.description ? '24px' : '16px')};\n  margin-right: 8px;\n  position: absolute;\n  top: ${(props) => (props.description ? '13px' : '8px')};\n  left: ${(props) => (props.description ? '24px' : '16px')};\n  ${colorCss}\n`;\n\nexport default DenseIcon;\n","import styled from 'styled-components';\nimport IconButton from 'sinoui-components/IconButton';\n\n/**\n * 关闭按钮组件\n */\nconst CloseButton = styled(IconButton)<{\n  description: boolean;\n}>`\n  position: absolute;\n  top: ${(props) => (props.description ? '10px' : '2px')};\n  right: 8px;\n  font-size: ${(props) => (props.description ? '14px' : '12px')};\n  color: ${(props) => props.theme.palette.text.secondary};\n`;\n\nexport default CloseButton;\n","import React, { useState } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { CSSTransition } from 'react-transition-group';\nimport {\n  AiFillCheckCircle,\n  AiOutlineCheckCircle,\n  AiOutlineInfoCircle,\n  AiFillInfoCircle,\n  AiFillCloseCircle,\n  AiFillExclamationCircle,\n  AiOutlineExclamationCircle,\n  AiOutlineCloseCircle,\n  AiOutlineClose,\n} from 'react-icons/ai';\nimport classNames from 'classnames';\nimport assert from 'assert';\nimport AlertMessage from './AlertMessage';\nimport AlertDescription from './AlertDescription';\nimport AlertLayout from './AlertLayout';\nimport DenseIcon from './DenseIcon';\nimport CloseButton from './CloseButton';\n\nconst timeout = 200;\n\nconst Globalstyle = createGlobalStyle`\n  .sinoui-alert-exit {\n    opacity: 1;\n  }\n  .sinoui-alert-exit-active {\n    opacity: 0;\n    transform: scale(0.9);\n    height: 0!important;\n    transition: opacity ${timeout}ms, transform ${timeout}ms, height ${timeout}ms;\n  }\n`;\n\ninterface Props {\n  /**\n   * 提示内容\n   */\n  message?: React.ReactNode;\n  /**\n   * 辅助性文字介绍\n   */\n  description?: React.ReactNode;\n  /**\n   * 是否显示辅助图标\n   */\n  showIcon?: boolean;\n  /**\n   * 是否显示关闭按钮，默认为false，即不展示\n   */\n  closable?: boolean;\n  /**\n   * 指定提示的样式，四种：info、success、warning、error\n   */\n  type?: 'info' | 'success' | 'warning' | 'error';\n  /**\n   * 关闭动画结束后触发的回调函数\n   */\n  afterClose?: () => void;\n  /**\n   * 自定义类名\n   */\n  className?: string;\n  /**\n   * 子元素\n   */\n  children?: React.ReactNode;\n}\n\nconst iconMapFilled = {\n  success: AiFillCheckCircle,\n  info: AiFillInfoCircle,\n  error: AiFillCloseCircle,\n  warning: AiFillExclamationCircle,\n};\n\nconst iconMapOutlined = {\n  success: AiOutlineCheckCircle,\n  info: AiOutlineInfoCircle,\n  error: AiOutlineCloseCircle,\n  warning: AiOutlineExclamationCircle,\n};\n\n/**\n * Alert组件  警告提示，展现需要关注的信息。\n */\nfunction Alert(props: Props) {\n  const [isVisible, setIsVisible] = useState(true);\n\n  const {\n    message,\n    children,\n    description,\n    closable,\n    type = 'info',\n    showIcon,\n    className,\n    afterClose,\n  } = props;\n\n  if (process.env.NODE_ENV === 'development') {\n    assert(message || children, 'Alert 组件必须指定 message 或者 children。');\n  }\n\n  const handleClose = () => {\n    setIsVisible(false);\n  };\n\n  const closeIcon = closable ? (\n    <CloseButton\n      dense\n      onClick={handleClose}\n      description={!!description}\n      data-testid=\"closeButton\"\n      aria-label=\"Close\"\n      className=\"sinoui-alert-close-button\"\n    >\n      <AiOutlineClose />\n    </CloseButton>\n  ) : null;\n\n  const IconType = (description ? iconMapOutlined : iconMapFilled)[type];\n\n  return (\n    <>\n      <CSSTransition\n        in={isVisible}\n        timeout={timeout}\n        classNames=\"sinoui-alert\"\n        onExited={afterClose}\n        unmountOnExit\n      >\n        <AlertLayout\n          showIcon={showIcon}\n          description={!!description}\n          closable={closable}\n          type={type}\n          className={classNames(\n            'sinoui-alert',\n            className,\n            `sinoui-alert--${type}`,\n            {\n              'sinoui-alert--show-description': !!description,\n              'sinoui-alert--closable': closable,\n              'sinoui-alert--show-icon': showIcon,\n            },\n          )}\n          role=\"alert\"\n        >\n          <AlertMessage\n            description={!!description}\n            data-testid=\"alertMessage\"\n            className=\"sinoui-alert-message\"\n          >\n            {message || children}\n          </AlertMessage>\n          <AlertDescription className=\"sinoui-alert-description\">\n            {description}\n          </AlertDescription>\n          {closeIcon}\n          {showIcon ? (\n            <DenseIcon\n              description={!!description}\n              type={type === 'info' ? 'primary' : type}\n              className=\"sinoui-alert-icon\"\n            >\n              <IconType />\n            </DenseIcon>\n          ) : null}\n        </AlertLayout>\n      </CSSTransition>\n      <Globalstyle />\n    </>\n  );\n}\n\nexport default Alert;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground } from 'docz';\nimport Alert from '../src/Alert';\nimport { ThemeProvider } from 'styled-components';\nimport { defaultTheme, createTheme, createPalette } from '@sinoui/theme';\nimport { pink, green } from '@sinoui/theme/colors';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"sinouialert\"\n    }}>{`@sinoui/alert`}</h1>\n    <p>{`警告提示，展现需要关注的信息。`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@sinoui/alert\"\n      }}><img alt=\"npm version\" src=\"https://img.shields.io/npm/v/@sinoui/alert\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@sinoui/alert\"\n      }}><img alt=\"downloads\" src=\"https://img.shields.io/npm/dm/@sinoui/alert\" /></a></p>\n    <p>{`更多示例请参考`}<a parentName=\"p\" {...{\n        \"href\": \"https://sinoui.github.io/alert/\"\n      }}>{`官方文档`}</a>{`。`}</p>\n    <h2 {...{\n      \"id\": \"依赖安装\"\n    }}>{`依赖安装`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add @sinoui/alert\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"入门示例\"\n    }}>{`入门示例`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport Alert from '@sinoui/alert';\n\nfunction Demo() {\n  return <Alert message=\"提示信息\" />;\n}\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  return <Alert message=\\\"提示信息\\\" />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        return <Alert message=\"提示信息\" mdxType=\"Alert\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"设置显示关闭按钮\"\n    }}>{`设置显示关闭按钮`}</h2>\n    <p>{`设置 `}<inlineCode parentName=\"p\">{`closeable`}</inlineCode>{` 属性即可显示关闭按钮。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-test\"\n      }}>{`<Alert message=\"提示信息\" closable />\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  return <Alert message=\\\"提示信息\\\" closable />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        return <Alert message=\"提示信息\" closable mdxType=\"Alert\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"设置显示辅助图标\"\n    }}>{`设置显示辅助图标`}</h2>\n    <p>{`设置 `}<inlineCode parentName=\"p\">{`showIcon`}</inlineCode>{` 属性即可显示辅助图标。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-test\"\n      }}>{`<Alert message=\"提示信息\" showIcon />\n`}</code></pre>\n    <Playground __position={2} __code={'() => {\\n  return <Alert message=\\\"提示信息\\\" showIcon />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        return <Alert message=\"提示信息\" showIcon mdxType=\"Alert\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"不同类型的警告提示\"\n    }}>{`不同类型的警告提示`}</h2>\n    <p>{`设置`}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`属性即可定义警告提示的样式，有四种选择 success、info、warning、error。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-test\"\n      }}>{`<Alert message=\"提示信息\" closable showIcon type=\"info\" />\n<Alert message=\"提示信息\" closable showIcon type=\"success\" />\n<Alert message=\"提示信息\" closable showIcon type=\"warning\" />\n<Alert message=\"提示信息\" closable showIcon type=\"error\" />\n`}</code></pre>\n    <Playground __position={3} __code={'() => {\\n  return (\\n    <>\\n      <Alert message=\\\"提示信息\\\" closable showIcon type=\\\"info\\\" />\\n      <Alert message=\\\"提示信息\\\" closable showIcon type=\\\"success\\\" />\\n      <Alert message=\\\"提示信息\\\" closable showIcon type=\\\"warning\\\" />\\n      <Alert message=\\\"提示信息\\\" closable showIcon type=\\\"error\\\" />\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        return <>\n        <Alert message=\"提示信息\" closable showIcon type=\"info\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" closable showIcon type=\"success\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" closable showIcon type=\"warning\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" closable showIcon type=\"error\" mdxType=\"Alert\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"设置辅助性文字介绍\"\n    }}>{`设置辅助性文字介绍`}</h2>\n    <p>{`设置`}<inlineCode parentName=\"p\">{`description`}</inlineCode>{`属性即可显示辅助性文字介绍。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-test\"\n      }}>{`<Alert message=\"提示信息\" description=\"辅助性文字介绍\" closable />\n`}</code></pre>\n    <Playground __position={4} __code={'() => {\\n  return (\\n    <Alert\\n      message=\\\"提示信息\\\"\\n      description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n      closable\\n    />\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        return <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable mdxType=\"Alert\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"设置辅助性文字介绍和辅助图标\"\n    }}>{`设置辅助性文字介绍和辅助图标`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-test\"\n      }}>{`<Alert message=\"提示信息\" description=\"辅助性文字介绍\" showIcon type=\"info\" />\n`}</code></pre>\n    <Playground __position={5} __code={'() => {\\n  return (\\n    <Alert\\n      message=\\\"提示信息\\\"\\n      description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n      showIcon\\n      type=\\\"info\\\"\\n    />\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        return <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" showIcon type=\"info\" mdxType=\"Alert\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"不同类型辅助性文字介绍和辅助图标\"\n    }}>{`不同类型辅助性文字介绍和辅助图标`}</h2>\n    <p>{`设置`}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`属性即可定义警告提示的样式，有四种选择 success、info、warning、error。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-test\"\n      }}>{`<Alert message=\"提示信息\" description=\"辅助性文字介绍\" closable showIcon type=\"info\" />\n<Alert message=\"提示信息\" description=\"辅助性文字介绍\" closable showIcon type=\"success\" />\n<Alert message=\"提示信息\" description=\"辅助性文字介绍\" closable showIcon type=\"warning\" />\n<Alert message=\"提示信息\" description=\"辅助性文字介绍\" closable showIcon type=\"error\" />\n`}</code></pre>\n    <Playground __position={6} __code={'() => {\\n  return (\\n    <>\\n      <Alert\\n        message=\\\"提示信息\\\"\\n        description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n        closable\\n        showIcon\\n        type=\\\"info\\\"\\n      />\\n      <Alert\\n        message=\\\"提示信息\\\"\\n        description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n        closable\\n        showIcon\\n        type=\\\"success\\\"\\n      />\\n      <Alert\\n        message=\\\"提示信息\\\"\\n        description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n        closable\\n        showIcon\\n        type=\\\"warning\\\"\\n      />\\n      <Alert\\n        message=\\\"提示信息\\\"\\n        description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n        closable\\n        showIcon\\n        type=\\\"error\\\"\\n      />\\n    </>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        return <>\n        <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable showIcon type=\"info\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable showIcon type=\"success\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable showIcon type=\"warning\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable showIcon type=\"error\" mdxType=\"Alert\" />\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"关闭动画结束后触发的回调函数\"\n    }}>{`关闭动画结束后触发的回调函数`}</h2>\n    <p>{`设置`}<inlineCode parentName=\"p\">{`afterClose`}</inlineCode>{`属性即可触发的回调函数。`}</p>\n    <Playground __position={7} __code={'() => {\\n  const afterClose = () => {\\n    alert(\\'提示框关闭动画结束\\')\\n  }\\n  return <Alert message=\\\"提示信息\\\" closable afterClose={afterClose} />\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        const afterClose = () => {\n          alert('提示框关闭动画结束');\n        };\n\n        return <Alert message=\"提示信息\" closable afterClose={afterClose} mdxType=\"Alert\" />;\n      }}\n    </Playground>  \n    <h2 {...{\n      \"id\": \"深色背景\"\n    }}>{`深色背景`}</h2>\n\n    <Playground __position={8} __code={'() => {\\n  const theme = createTheme({\\n    palette: createPalette({\\n      type: \\'dark\\', // 渲染黑色背景\\n    }),\\n  })\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <div style={{ background: \\'black\\', padding: \\'50px\\' }}>\\n        <Alert\\n          message=\\\"提示信息\\\"\\n          description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n          closable\\n          showIcon\\n          type=\\\"info\\\"\\n        />\\n        <Alert\\n          message=\\\"提示信息\\\"\\n          description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n          closable\\n          showIcon\\n          type=\\\"success\\\"\\n        />\\n        <Alert\\n          message=\\\"提示信息\\\"\\n          description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n          closable\\n          showIcon\\n          type=\\\"warning\\\"\\n        />\\n        <Alert\\n          message=\\\"提示信息\\\"\\n          description=\\\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\\\"\\n          closable\\n          showIcon\\n          type=\\\"error\\\"\\n        />\\n      </div>\\n    </ThemeProvider>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Alert,\n      ThemeProvider,\n      defaultTheme,\n      createTheme,\n      createPalette,\n      pink,\n      green\n    }} mdxType=\"Playground\">\n  {() => {\n        const theme = createTheme({\n          palette: createPalette({\n            type: 'dark' // 渲染黑色背景\n\n          })\n        });\n        return <ThemeProvider theme={theme} mdxType=\"ThemeProvider\"> \n      <div style={{\n            background: 'black',\n            padding: '50px'\n          }}>\n        <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable showIcon type=\"info\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable showIcon type=\"success\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable showIcon type=\"warning\" mdxType=\"Alert\" />\n        <Alert message=\"提示信息\" description=\"React 使创建交互式 UI 变得轻而易举。为你应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。以声明式编写 UI，可以让你的代码更加可靠，且方便调试。创建拥有各自状态的组件，再由这些组件构成更加复杂的 UI。\" closable showIcon type=\"error\" mdxType=\"Alert\" />\n      </div>\n    </ThemeProvider>;\n      }}\n    </Playground>  \n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <p>{`Alert组件属性：`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`参数名称`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`参数类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`说明`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`message`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`警告提示内容`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`children`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`React.ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`子元素，相当于 message`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`type`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`指定警告提示的样式，有四种选择 success、info、warning、error`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`description`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ReactNode`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`警告提示的辅助性文字介绍`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`showIcon`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`是否显示辅助图标`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`closable`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`boolean`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`是否显示关闭按钮，默认为 false，即不展示`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`afterClose`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`() => void`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`关闭动画结束后触发的回调函数`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`自定义类名`}</td>\n        </tr>\n      </tbody>\n    </table>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}